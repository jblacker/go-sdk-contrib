// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/open-feature/go-sdk/openfeature (interfaces: FeatureProvider,Hook,StateHandler,EventHandler)
//
// Generated by this command:
//
//	mockgen -destination=../../internal/mocks/openfeature_mocks.go -package=mocks github.com/open-feature/go-sdk/openfeature FeatureProvider,Hook,StateHandler,EventHandler
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	openfeature "github.com/open-feature/go-sdk/openfeature"
	gomock "go.uber.org/mock/gomock"
)

// MockFeatureProvider is a mock of FeatureProvider interface.
type MockFeatureProvider struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureProviderMockRecorder
	isgomock struct{}
}

// MockFeatureProviderMockRecorder is the mock recorder for MockFeatureProvider.
type MockFeatureProviderMockRecorder struct {
	mock *MockFeatureProvider
}

// NewMockFeatureProvider creates a new mock instance.
func NewMockFeatureProvider(ctrl *gomock.Controller) *MockFeatureProvider {
	mock := &MockFeatureProvider{ctrl: ctrl}
	mock.recorder = &MockFeatureProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureProvider) EXPECT() *MockFeatureProviderMockRecorder {
	return m.recorder
}

// BooleanEvaluation mocks base method.
func (m *MockFeatureProvider) BooleanEvaluation(ctx context.Context, flag string, defaultValue bool, evalCtx openfeature.FlattenedContext) openfeature.BoolResolutionDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BooleanEvaluation", ctx, flag, defaultValue, evalCtx)
	ret0, _ := ret[0].(openfeature.BoolResolutionDetail)
	return ret0
}

// BooleanEvaluation indicates an expected call of BooleanEvaluation.
func (mr *MockFeatureProviderMockRecorder) BooleanEvaluation(ctx, flag, defaultValue, evalCtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BooleanEvaluation", reflect.TypeOf((*MockFeatureProvider)(nil).BooleanEvaluation), ctx, flag, defaultValue, evalCtx)
}

// FloatEvaluation mocks base method.
func (m *MockFeatureProvider) FloatEvaluation(ctx context.Context, flag string, defaultValue float64, evalCtx openfeature.FlattenedContext) openfeature.FloatResolutionDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FloatEvaluation", ctx, flag, defaultValue, evalCtx)
	ret0, _ := ret[0].(openfeature.FloatResolutionDetail)
	return ret0
}

// FloatEvaluation indicates an expected call of FloatEvaluation.
func (mr *MockFeatureProviderMockRecorder) FloatEvaluation(ctx, flag, defaultValue, evalCtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FloatEvaluation", reflect.TypeOf((*MockFeatureProvider)(nil).FloatEvaluation), ctx, flag, defaultValue, evalCtx)
}

// Hooks mocks base method.
func (m *MockFeatureProvider) Hooks() []openfeature.Hook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hooks")
	ret0, _ := ret[0].([]openfeature.Hook)
	return ret0
}

// Hooks indicates an expected call of Hooks.
func (mr *MockFeatureProviderMockRecorder) Hooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hooks", reflect.TypeOf((*MockFeatureProvider)(nil).Hooks))
}

// IntEvaluation mocks base method.
func (m *MockFeatureProvider) IntEvaluation(ctx context.Context, flag string, defaultValue int64, evalCtx openfeature.FlattenedContext) openfeature.IntResolutionDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntEvaluation", ctx, flag, defaultValue, evalCtx)
	ret0, _ := ret[0].(openfeature.IntResolutionDetail)
	return ret0
}

// IntEvaluation indicates an expected call of IntEvaluation.
func (mr *MockFeatureProviderMockRecorder) IntEvaluation(ctx, flag, defaultValue, evalCtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntEvaluation", reflect.TypeOf((*MockFeatureProvider)(nil).IntEvaluation), ctx, flag, defaultValue, evalCtx)
}

// Metadata mocks base method.
func (m *MockFeatureProvider) Metadata() openfeature.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(openfeature.Metadata)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockFeatureProviderMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockFeatureProvider)(nil).Metadata))
}

// ObjectEvaluation mocks base method.
func (m *MockFeatureProvider) ObjectEvaluation(ctx context.Context, flag string, defaultValue any, evalCtx openfeature.FlattenedContext) openfeature.InterfaceResolutionDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectEvaluation", ctx, flag, defaultValue, evalCtx)
	ret0, _ := ret[0].(openfeature.InterfaceResolutionDetail)
	return ret0
}

// ObjectEvaluation indicates an expected call of ObjectEvaluation.
func (mr *MockFeatureProviderMockRecorder) ObjectEvaluation(ctx, flag, defaultValue, evalCtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectEvaluation", reflect.TypeOf((*MockFeatureProvider)(nil).ObjectEvaluation), ctx, flag, defaultValue, evalCtx)
}

// StringEvaluation mocks base method.
func (m *MockFeatureProvider) StringEvaluation(ctx context.Context, flag, defaultValue string, evalCtx openfeature.FlattenedContext) openfeature.StringResolutionDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringEvaluation", ctx, flag, defaultValue, evalCtx)
	ret0, _ := ret[0].(openfeature.StringResolutionDetail)
	return ret0
}

// StringEvaluation indicates an expected call of StringEvaluation.
func (mr *MockFeatureProviderMockRecorder) StringEvaluation(ctx, flag, defaultValue, evalCtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringEvaluation", reflect.TypeOf((*MockFeatureProvider)(nil).StringEvaluation), ctx, flag, defaultValue, evalCtx)
}

// MockHook is a mock of Hook interface.
type MockHook struct {
	ctrl     *gomock.Controller
	recorder *MockHookMockRecorder
	isgomock struct{}
}

// MockHookMockRecorder is the mock recorder for MockHook.
type MockHookMockRecorder struct {
	mock *MockHook
}

// NewMockHook creates a new mock instance.
func NewMockHook(ctrl *gomock.Controller) *MockHook {
	mock := &MockHook{ctrl: ctrl}
	mock.recorder = &MockHookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHook) EXPECT() *MockHookMockRecorder {
	return m.recorder
}

// After mocks base method.
func (m *MockHook) After(ctx context.Context, hookContext openfeature.HookContext, flagEvaluationDetails openfeature.InterfaceEvaluationDetails, hookHints openfeature.HookHints) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "After", ctx, hookContext, flagEvaluationDetails, hookHints)
	ret0, _ := ret[0].(error)
	return ret0
}

// After indicates an expected call of After.
func (mr *MockHookMockRecorder) After(ctx, hookContext, flagEvaluationDetails, hookHints any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "After", reflect.TypeOf((*MockHook)(nil).After), ctx, hookContext, flagEvaluationDetails, hookHints)
}

// Before mocks base method.
func (m *MockHook) Before(ctx context.Context, hookContext openfeature.HookContext, hookHints openfeature.HookHints) (*openfeature.EvaluationContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Before", ctx, hookContext, hookHints)
	ret0, _ := ret[0].(*openfeature.EvaluationContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Before indicates an expected call of Before.
func (mr *MockHookMockRecorder) Before(ctx, hookContext, hookHints any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Before", reflect.TypeOf((*MockHook)(nil).Before), ctx, hookContext, hookHints)
}

// Error mocks base method.
func (m *MockHook) Error(ctx context.Context, hookContext openfeature.HookContext, err error, hookHints openfeature.HookHints) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", ctx, hookContext, err, hookHints)
}

// Error indicates an expected call of Error.
func (mr *MockHookMockRecorder) Error(ctx, hookContext, err, hookHints any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockHook)(nil).Error), ctx, hookContext, err, hookHints)
}

// Finally mocks base method.
func (m *MockHook) Finally(ctx context.Context, hookContext openfeature.HookContext, hookHints openfeature.HookHints) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finally", ctx, hookContext, hookHints)
}

// Finally indicates an expected call of Finally.
func (mr *MockHookMockRecorder) Finally(ctx, hookContext, hookHints any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finally", reflect.TypeOf((*MockHook)(nil).Finally), ctx, hookContext, hookHints)
}

// MockStateHandler is a mock of StateHandler interface.
type MockStateHandler struct {
	ctrl     *gomock.Controller
	recorder *MockStateHandlerMockRecorder
	isgomock struct{}
}

// MockStateHandlerMockRecorder is the mock recorder for MockStateHandler.
type MockStateHandlerMockRecorder struct {
	mock *MockStateHandler
}

// NewMockStateHandler creates a new mock instance.
func NewMockStateHandler(ctrl *gomock.Controller) *MockStateHandler {
	mock := &MockStateHandler{ctrl: ctrl}
	mock.recorder = &MockStateHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateHandler) EXPECT() *MockStateHandlerMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockStateHandler) Init(evaluationContext openfeature.EvaluationContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", evaluationContext)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockStateHandlerMockRecorder) Init(evaluationContext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockStateHandler)(nil).Init), evaluationContext)
}

// Shutdown mocks base method.
func (m *MockStateHandler) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockStateHandlerMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockStateHandler)(nil).Shutdown))
}

// Status mocks base method.
func (m *MockStateHandler) Status() openfeature.State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(openfeature.State)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockStateHandlerMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockStateHandler)(nil).Status))
}

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
	isgomock struct{}
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// EventChannel mocks base method.
func (m *MockEventHandler) EventChannel() <-chan openfeature.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventChannel")
	ret0, _ := ret[0].(<-chan openfeature.Event)
	return ret0
}

// EventChannel indicates an expected call of EventChannel.
func (mr *MockEventHandlerMockRecorder) EventChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventChannel", reflect.TypeOf((*MockEventHandler)(nil).EventChannel))
}
